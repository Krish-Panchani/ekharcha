// Define the datasource and generator
datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL") // The connection string will be read from an environment variable
}

generator client {
    provider = "prisma-client-js" // Prisma's client for JS/TS
}

// Define the models

// User model for handling users
model User {
    id String @id @default(cuid())

    emailAddress String  @unique
    imageUrl     String?
    firstName    String?
    lastName     String?

    expenses   Expense[]  @relation("UserExpenses")
    incomes    Income[]   @relation("UserIncomes")
    categories Category[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Category model for managing user-defined categories
model Category {
    id Int @id @default(autoincrement())

    name   String
    type   CategoryType
    userId String

    user     User      @relation(fields: [userId], references: [id])
    expenses Expense[] @relation("CategoryExpenses")
    incomes  Income[]  @relation("CategoryIncomes")

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Enum to distinguish between Expense and Income categories
enum CategoryType {
    EXPENSE
    INCOME
}

enum PaymentModeType {
    UPI
    CASH
    WALLET
    CARD
}

// Expense model for tracking expenses
model Expense {
    id Int @id @default(autoincrement())

    amount     Float // Amount spent
    comment    String? // Optional comment
    date       DateTime @default(now())
    categoryId Int
    userId     String

    category    Category        @relation("CategoryExpenses", fields: [categoryId], references: [id])
    user        User            @relation("UserExpenses", fields: [userId], references: [id])
    paymentMode PaymentModeType @default(UPI)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Income model for tracking income
model Income {
    id Int @id @default(autoincrement())

    amount     Float // Amount received
    comment    String? // Optional comment
    date       DateTime @default(now())
    categoryId Int
    userId     String

    category Category @relation("CategoryIncomes", fields: [categoryId], references: [id])
    user     User     @relation("UserIncomes", fields: [userId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
