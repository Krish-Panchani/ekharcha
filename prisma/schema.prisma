// Define the datasource and generator
datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL") // The connection string will be read from an environment variable
}

generator client {
    provider = "prisma-client-js" // Prisma's client for JS/TS
}

// Define the models

// User model for handling users
model User {
    id String @id @default(cuid())

    emailAddress String  @unique
    imageUrl     String?
    firstName    String?
    lastName     String?

    // transactions Transaction[] @relation("UserTransactions") // All transactions for the user
    categories  Category[] // User's categories for transactions
    Transaction Transaction[] @relation("UserTransactions") // All transactions for the user

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Category model for managing user-defined categories
model Category {
    id Int @id @default(autoincrement())

    name   String // Category name (e.g., "Groceries", "Salary")
    userId String // User to whom the category belongs
    type   TransactionType // Transaction type (INCOME or EXPENSE)

    user        User          @relation(fields: [userId], references: [id])
    Transaction Transaction[] @relation("CategoryTransactions") // All transactions for the category

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Enum to distinguish between transaction types (Income vs Expense)
enum TransactionType {
    INCOME
    EXPENSE
}

// Enum to define payment methods
enum PaymentModeType {
    UPI
    CASH
    WALLET
    CARD
}

// Transaction model for tracking both income and expenses
model Transaction {
    id Int @id @default(autoincrement())

    amount      Float // Amount of the transaction
    comment     String? // Optional comment
    date        DateTime
    categoryId  Int
    userId      String
    type        TransactionType // Type of transaction (INCOME or EXPENSE)
    paymentMode PaymentModeType @default(UPI)

    category Category @relation("CategoryTransactions", fields: [categoryId], references: [id])
    user     User     @relation("UserTransactions", fields: [userId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
